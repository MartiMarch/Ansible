# ----------------------------------------------------------------------------- *
# ADVERTENCIA -> Es necesario utilizar dos o más núcleos en la máquina virtual. *
# ----------------------------------------------------------------------------- *

# -- Instalación de SSH --
# yum –y install openssh-server openssh-clients
# systemctl start sshd
# systemctl enable sshd
# ----

# -- Instlación de Ansible --
# yum install epel-release
# yum install ansible
# yum -y update
# ----

# -- Generación de una clave SSH que punta al mismo ordenador --
# ssh-keygen
# Pulsa enter y introduce una frase.
# ssh-copy-id root@192.168.1.37
# vi /etc/ansible/hosts
# Añade la IP del ordenador al que quieres apuntar
# mkdir Ansible
# ----

# -- Habilita la interfaz enp0s3 ycrear Adaptador puente --
# Ves a la configuración de la máquina virtual, subapartado “Red” y selecciona la opción “Adaptador puente”.
# vi /etc/sysconfig/network-scripts/ifcfg-enp0s3
# Modifica la opción de “ONBOOT=no” a “ONBOOT=yes” y guarda los cambios.
# service network restart
# ----

# Instalación de Kubernetes
---
- name: Instalacion de Jenkins sobre Kubernetes
  hosts: Jenkins
  tasks:
  - name: Instalando yum-utils
    yum:
      name: yum-utils
      state: present

  - name: Instalando device-mapper-persistent-data
    yum:
      name: device-mapper-persistent-data
      state: present

  - name: Instalando lvm2
    yum:
      name: lvm2
      state: present

  - name: Instalando httpd
    yum:
      name: httpd
      state: present

  - name: Iniciando el servicio httpd
    ansible.builtin.systemd:
      name: httpd
      state: started
      enabled: yes

  - name: Añadiendo el repositorio de Docker
    shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

  - name: Instalando Docker
    yum:
      name: docker-ce
      state: present

  - name: Iniciando el servicio de Docker
    ansible.builtin.systemd:
      name: docker
      state: started
      enabled: yes

  - name: Creando carpetaa para Kubernetes
    ansible.builtin.file:
      path: /kubernetes
      state: directory

  - name: Configurandio el repositorio de Kubernetes
    shell: |
      cat <<EOF > /etc/yum.repos.d/kubernetes.repo
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      EOF
  - name: Instalando kubelet
    yum:
      name: kubelet-1.20.0-0
      state: present

  - name: Instalando kubeadm
    yum:
      name: kubeadm-1.20.0-0
      state: present

  - name: Instalando kubectl
    yum:
      name: kubectl-1.20.0-0
      state: present

  - name: Iniciando el servicio kubelet y habilitandolo
    ansible.builtin.systemd:
      name: kubelet
      state: started
      enabled: yes

  - name: Configurando la red
    shell: |
      cat <<EOF > /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      EOF

  - name: Se modifica el kernel
    shell: sysctl --system

  - name: Se configura el firewall
    shell: echo '1' > /proc/sys/net/ipv4/ip_forward

  - name: Se desactiva Selinux
    shell: setenforce 0

  - name: Se configura Selinux
    shell: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

  - name: Se configura fstab
    shell: sed -i '/swap/d' /etc/fstab

  - name: Se desactiva swap
    shell: swapoff -a

  - name: Creando el cluster de kubernetes
    shell: kubeadm init --apiserver-advertise-address={{ ip }} --pod-network-cidr=10.244.0.0/16
    ignore_errors: yes

  - name: Se crea un directorio para el archivo de configuracion de Kubernetes
    ansible.builtin.file:
      path: ~/kube
      state: directory

  - name: Se copia el archivo de configuracion a la ruta anterior
    shell: cp /etc/kubernetes/admin.conf ~/.kube/config

  - name: Se aplican los cambios de red a Kubernetes
    shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

#  - name: Creando un token para un nodo esclavo
#    ansible.builtin.shell: kubeadm token create
#    register: TOKEN

#  - name: Obteniendo el Hash para el nodo esclavo
#    ansible.builtin.shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
#    register: HASH

#  - name: Creando el primer nodo esclavo de Jenkins
#    shell: kubeadm join {{ ip }}:6443 --token {{ TOKEN.stdout }} --discovery-token-ca-cert-hash sha256:{{ HASH.stdout }}

  - name: El nodo maestro ahora puede ser un nodo trabajador
    shell: kubectl taint nodes --all node-role.kubernetes.io/master-
    ignore_errors: yes

  - name: Creando la carpeta Descargas
    ansible.builtin.file:
      path: /descargas
      state: directory

  - name: Se descarga el script de Helm 3
    get_url:
      url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
      dest: /descargas/get_helm.sh

  - name: Otorgando permisos al Script
    shell: chdir=/descargas chmod +x get_helm.sh

  - name: Ejecutando el Script
    shell: chdir=/descargas ./get_helm.sh
    ignore_errors: yes

  - name: Añadiendo el repositorio a Helm
    shell: helm repo add jenkinsci https://charts.jenkins.io

  - name: Se actualiza el repositorio
    shell: helm repo update

  - name: Creando el espacio de Kubernetes para Jenkins
    shell: kubectl create namespace jenkins
    ignore_errors: yes

  - name: Descargando el archivo YAML del volumen persistente
    get_url:
      url: https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-volume.yaml
      dest: /descargas/jenkins-volume.yaml

  - name: Creando volumen persistente
    shell: chdir=/descargas kubectl apply -f jenkins-volume.yaml

  - name: Creando el servicio de Jenkins
    get_url:
      url: https://raw.githubusercontent.com/jenkins-infra/jenkins.io/master/content/doc/tutorials/kubernetes/installing-jenkins-on-kubernetes/jenkins-sa.yaml
      dest: /descargas/jenkins-sa.yaml

  - name: Instalando el servicio de Jenkins
    shell: chdir=/descargas kubectl apply -f jenkins-sa.yaml

  - name: Descargando archivo de configuracion de Jenkins
    get_url:
      url: https://raw.githubusercontent.com/MartiMarch/Ansible/main/JenkinsPod.yml
      dest: /descargas/jenkins-values.yaml

  - name: Instalando el Chart de Jenkins desde Helm 3
    shell: chdir=/descargas helm install jenkins -n jenkins -f jenkins-values.yaml jenkinsci/jenkins
    ignore_errors: yes
    
#  - name: Obteniendo la contraseña de Jenkins
#    ansible.builtin.shell: kubectl get secret -n jenkins jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64
#    register: PASSW

#  - name: Obteniendo la url de Jenkins
#    ansible.builtin.shell: get -n jenkins -o jsonpath="{.spec.ports[0].nodePort}" services jenkins:kubectl get nodes -n jenkins -o jsonpath="{.spec.ports[0].nodePort}"
#    register: URL

#  - name: Imprimendo la URL y la contraseña de Jenkins
#    ansible.builtin.debug:
#      msg: La URL es {{ URL.stdout }} y la contraseña es {{ PASSW.stdout }}

# https://www.jenkins.io/doc/book/installing/kubernetes/
